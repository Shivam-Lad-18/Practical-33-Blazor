@page "/"
@page "/expense-list"
@inject ExpenseService expense_service
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<h3>Expense List</h3>

@if (expenses == null)
{
    <p><em>Loading...</em></p>
}
else if (!expenses.Any())
{
    <p><em>No expenses found.</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>Title</th>
                <th>Note</th>
                <th>Amount</th>
                <th>Date</th>
                <th>Category</th>
                <th>Payment Method</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in expenses)
            {
                <tr>
                    <td>@item.Title</td>
                    <td>@item.Note</td>
                    <td>@item.Amount.ToString("C")</td>
                    <td>@item.Date.ToShortDateString()</td>
                    <td>@item.Category</td>
                    <td>@item.PaymentMethod</td>
                    <td>
                        <button class="btn btn-sm btn-info" @onclick="() => View(item.ExpenseId)">View</button>
                        <button class="btn btn-sm btn-warning" @onclick="() => Edit(item.ExpenseId)">Edit</button>
                        <button class="btn btn-sm btn-danger" @onclick="() => Delete(item.ExpenseId)">Delete</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <h5>Total Expense: @expenses.Sum(e => e.Amount).ToString("C")</h5>
}

<button class="btn btn-primary" @onclick="AddNew">Add New Expense</button>

@code {
    private List<Expense> expenses;

    protected override async Task OnInitializedAsync()
    {
        expenses = await expense_service.GetAllExpensesAsync();
    }

    private void AddNew()
    {
        NavigationManager.NavigateTo("/add-expense");
    }

    private void Edit(Guid id)
    {
        NavigationManager.NavigateTo($"/edit-expense/{id}");
    }

    private async Task Delete(Guid id)
    {
        bool confirmed = await JS.InvokeAsync<bool>("confirm", "Are you sure you want to delete this expense?");
        if (confirmed)
        {
            await expense_service.DeleteExpenseAsync(id);
            expenses = await expense_service.GetAllExpensesAsync();
        }
    }
    private void View(Guid id)
    {
        NavigationManager.NavigateTo($"/view-expense/{id}");
    }
}